# .github/workflows/main.yml
name: Build Fence Game Executable

on:
  push:
    branches: [ main ]
    paths:
      - '**.py'
      - 'sprites/**'
      - 'requirements.txt'
      - '.github/workflows/main.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        shell: pwsh

      # --- Step 1: Generate the base .spec file ---
      - name: Generate PyInstaller Spec File
        run: |
          # Generate spec without --add-data initially
          # Include other necessary options like --windowed, --onefile, --name, --hidden-import
          pyi-makespec --noconfirm --onefile --windowed --name FenceGameOnline --hidden-import pygame.scrap --hidden-import imageio --hidden-import numpy --hidden-import pyperclip main.py
        shell: pwsh

      # --- Step 2: Modify the .spec file to add data ---
      - name: Add data files to Spec File
        run: |
          # Read the generated spec file content
          $specFile = "FenceGameOnline.spec"
          $specContent = Get-Content -Path $specFile -Raw

          # Define the data tuple format expected by PyInstaller spec files: [('source_path', 'destination_in_bundle')]
          $dataToAdd = "[('sprites', 'sprites')]" # Add the sprites folder to the root of the bundle

          # Replace the empty datas=[] list using regex for flexibility with whitespace
          # Matches 'datas=', optional whitespace, [], optional whitespace inside []
          $modifiedContent = $specContent -replace 'datas=\s*\[\s*\]', "datas=$dataToAdd"

          # Verify the replacement happened (optional but good practice)
          if ($specContent -eq $modifiedContent) {
            Write-Error "Failed to find and replace 'datas=[]' in $specFile. Spec file content:"
            Write-Error $specContent
            exit 1 # Fail the step if replacement didn't occur
          }

          # Write the modified content back to the spec file
          Set-Content -Path $specFile -Value $modifiedContent

          Write-Host "Successfully added datas to $specFile. New content:"
          Get-Content -Path $specFile # Print the modified spec file content for verification
        shell: pwsh

      # --- Step 3: Build the executable using the modified .spec file ---
      - name: Build executable from Spec File
        run: |
          # Run PyInstaller using the modified spec file
          pyinstaller --noconfirm FenceGameOnline.spec
        shell: pwsh

      # --- Step 4: Upload the artifact ---
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: FenceGameOnline-Windows-Executable
          path: dist/FenceGameOnline.exe
          if-no-files-found: error
